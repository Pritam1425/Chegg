.data 
A_vec: .word 2,4,20,13,3,10,5#A vector
B_vec: .word 4,2,1,2,5,2,4#B vector
DOTPROD: .word#Memory location to store the dot product
.text
.globl main
main:
    la $a1,A_vec#loading A_vec
    la $a2,B_vec#loading B_vec
    li $t0,0#loop iterator
    li $a0,0#a0 will store the sum of products
label:
    beq $t0,7,exit# branch to exit if $t0 = 7,i.e size of the vector
    sll $t3,$t0,2# shifting the $t0 left by 2. It basically multiplies by 4
    add $t4,$t3,$a1#The new integer will be at $a1+$t3 location
    lw $t6,0($t4)#Now load the value stored at $t4
    
    add $t5,$t3,$a2#Do the same for B_vec
    lw $t7,0($t5)
    
    mult $t6,$t7#multi stores the multiplication into lo and hi. 32 least significant bits are stored in lo.
    mflo $t9#as our code does not require to multiply big numbers, accessing lo will suffice
    add $a0,$a0,$t9#add the product in $a0
    addi $t0,$t0,1#increment the iterator
    j label#jump to label for loop
exit:
    sw $a0,DOTPROD#here we store the value of dot product in DOTPROD memory location
    
    li $v0,1#For printing integers
    add $a0,$a0,$zero#printing the dotproduct
    syscall
    
    li $v0,10#exit
    syscall